= 前提条件
Userテーブル=>Devise
Itemテーブル=>記事を作成する。title:string text:textでscaffold


= CarrerWave File Uploading  
ASCIICASTS[http://ja.asciicasts.com/episodes/253-carrierwave-file-uploads]
ほぼまんまでいけるimageカラムをitemテーブルに追加。

= Devise 導入
これ[http://kitbc.s41.xrea.com/main/?use_devise]にそってやる。

= リレーション
itemモデルに参照元となるuser_idを追加（これ忘れたら作れない。案外これ載っていない。）
  rails g migration add_user_id_to_items

そのあとフォームを利用してuser_idを自動で登録するようにする。
  <div class="field">
    <%= f.hidden_field :user_id, :value => current_user.id %>  
  </div>

こちら[http://neec-is.g.hatena.ne.jp/is178/20091206/1260069121]を見て、試しにEmailアドレスを表示する。
  <td><%= item.user.email %></td>

これをindex.html.erbに追加。
Userテーブルにnameでも追加すれば、簡単に表示ができる。

= Mini_magickでページごとに画像調整

RailsGirls[http://railsgirls-jp.github.io/thumbnails/]に載っている。

Mini_magick該当箇所のコメントアウトを外す

app/uploaders/image_uploader.rb

  version :thumb do
    process :resize_to_fill => [200,200]
  end

  version :show do
    process :resize_to_fill => [300,250]
  end

のように、versionごとに分けて記載する。

そのあと、viewのitemでthumbならindexのimage_tagの末尾に(:thumb)をつけるなど、各場合についてversionを適用する。

= acts_as_taggable_on

ASCIICASTS[http://railscasts.com/episodes/382-tagging?language=ja&view=asciicast]
をまんま使えば大丈夫。
mapはタイトル検索などで使い分けないといけないかも

= bootstrap

application.js,application.cssにrequireを書く
navbarはnavbar-fixed-topにすると、ウィンドウを小さくしても
余白が生まれたりしない。

root_pathやdestroy_user_session_pathなどは、liタグの次に書く

  <% if user_signed_in? %>
    ...
  <% end %>

でnavbarの表示を変える

flat-uiとかも適用できる！やったね！

= サムネイルにリンクはる

こちら[http://d.hatena.ne.jp/satake7/20080908/p1]を参考にする

= 投稿したユーザーのみdestroyとかeditとか表示する

  <% if current_user == item.user %>
    ...
  <% end %>

itemってとこが重要。
このやり方で他のページもできるよ。

= created_atが新しい順に表示する

こちら[https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-talk/gANZDdb8u5s]を参考にする。
例えば

  if params[:tag]
    @items = Item.tagged_with(params[:tag])
    @items = @items.sort_by{ |m| m.created_at}.reverse()
  else
    @items = Item.all
    @items = @items.sort_by{ |m| m.created_at}.reverse()
  end

indexならこんな感じ

= party_boyでフォロー機能

微妙に難しかった
こちら[http://tnakamura.hatenablog.com/entry/20120703/party_boy]

  rails generate party_boy

マイグレーションファイルの名前のせいでエラーが出るから

  class CreateRelationship
    ...
  end

にする。詳細はこちら[https://github.com/mnelson/party_boy/issues/6]
これを修正したら、

  rake db:migrate

こうしてリレーションに必要なテーブルが作成される。
けど、アクセスできない変数があるので、relationshipモデルに

  attr_accessible :requestor, :requestee, :restricted

と記載する。こうする事でほぼ使えるようになる。
こっからが面倒。まずUserモデルに

  acts_as_followable

を追加。
その後コントローラー、ルーティング、ビューの順に編集していく。
まずコントローラー。フォロー追加、解除のアクションを追加する。

  def user_follow
    @item = Item.find(params[:id])
    current_user.follow(@item.user)
    # これはscaffoldのやつと同じで、item_urlにリダイレクトするようになっている。
    respond_to do |format|
      format.html { redirect_to item_url }
      format.json { head :no_content }
    end
  end

  def user_unfollow
    @item = Item.find(params[:id])
    current_user.unfollow(@item.user)
    respond_to do |format|
      format.html { redirect_to item_url }
      format.json { head :no_content }
    end
  end

次にルーティング。アクションがあったときのpathをitemsのルートに追加する。

  resources :items do
    member do
      get "user_follow"
      get "user_unfollow"
    end
  end

最後にビュー。これが鬼門だった……ルーティングを確認してから、以下を追加した。

  <% unless current_user==@item.user %>
    <% if current_user.following?(@item.user) %>
      <%= link_to "Remove", user_unfollow_item_path %>
    <% else %>
      <%= link_to "Add Friend", user_follow_item_path %>
    <% end %>
  <% end %>

これでおっけー。ついでにフォロワーを表示するには、

  @following = current_user.following

をコントローラーに追加した後、ビューに以下を追加すれば良い。

  <p>
    <% @following.each do |f| %>
    <b><%= f.email %></b><br />
    <% end %>
  </p>

= sextant

もうrake routesなんていらない。Rail4.0だと標準装備らしい。3.2でも見れる。便利でいいね。

= ログイン、ログアウトの表示を変更する

まあ簡単

  <% if user_signed_in? %>
  <ul class="nav pull-right">
    <li class="dropdown">
      <a href="#" class="dropdown-toggle" data-toggle="dropdown">
      <%= current_user.email %>
      <span class="caret"></span>
      </a>
      <ul class="dropdown-menu">
       <li><a href="">Google+に参加</a></li>
       <li><%= link_to "ログアウト", destroy_user_session_path, method: :delete %></li>
       <li><a href="">アカウント設定</a></li>
       <li class="divider"></li>
       <li><%= link_to "ログアウト", destroy_user_session_path, method: :delete %></li>
      </ul>
    </li>
  </ul>
  <% else %>
    <ul class="nav pull-right">
    <li class="dropdown">
    <a href="#" class="dropdown-toggle" data-toggle="dropdown">
    test
    <span class="caret"></span>
    </a>
    <ul class="dropdown-menu">
    <li><a href="">Google+に参加</a></li>
    <li><a href="">プライバシー</a></li>
    <li><a href="">アカウント設定</a></li>
    <li class="divider"></li>
    <li><%= link_to "ログイン", new_user_session_path %></li>
    </ul>
    </li>
    </ul>
  <% end %>


= Ransack

目が飛ぶくらい簡単
こちら[http://railscasts.com/episodes/370-ransack?language=ja&view=asciicast]を参考に！
items_controllerのindexに書く。
（今回はtagとの兼用の仕方がわからないので、とりあえずtagの機能をコメントアウト）

  #if params[:q][:tag]
  #  @items = Item.tagged_with(params[:q][:tag])
  #  @items = @items.sort_by{ |m| m.created_at}.reverse()
  #else

  @search=Item.search(params[:q])
  @items=@search.result
  @items = @items.sort_by{ |m| m.created_at}.reverse()

  #end

indexには検索フォームを作る

  <%= search_form_for @search do |f| %>
    <div class="field">
      <%= f.label :title_cont, "Title" %>
      <%= f.text_field :title_cont %>
    </div>
    <div class="actions"><%= f.submit "Search" %></div>
  <% end %>


= acts_as_commentable

コメント機能をつける。今回はacts_as_commentableを使う。
こちら[http://yorunocafe.blogspot.jp/2011/08/railsactsascommentable.html]を参照

  rails g comment

を忘れないように。今回はuser_idもリレーションのために追加しておいた。

なんかCommentsControllerにしなくちゃいけなかったり、命名規則の部分でミスが多いから、
自分で直すように気をつけないといけない。
あとコメントを表示するモデルの名前をpostから置き換えないと表示できないので注意。
あと、_formと_showの二つを作ってファイルを分割した。
まじで命名規則にそってない解説だから注意。

userモデルとcommentモデルにリレーションを設定すれば、
commentを作成したuserの名前やメールアドレスも表示できる。
ただ、この設定をする以前にuser_idを持たないcommentを作成していると、エラーが出るので注意。

  